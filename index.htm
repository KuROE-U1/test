<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>index</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            height: 200vh; /* 縦にスクロールするための高さ */
            /*visibility: hidden; /* 初期状態で非表示 */
        }
        nav {
            display: block;
        }
        @media screen and (max-width: 960px)  {
            nav{
                display: none;
            }
        }
        a {
            text-decoration: none;
            color: black;
        }
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 30px 50px;
            width: 100%;
            position: fixed;
            box-sizing: border-box;
            z-index: 1000;
        }
        @media screen and (max-width: 960px)  {
            header{
                padding: 20px 20px;
            }
        }
        .siteTitle {
            font-size: 24px;
            font-weight: bold;
        }
        .navList {
            display: flex;
            gap: 20px;
            list-style: none;
            font-weight: bold;
        }
        .text-animation {
            display: flex;
            gap: 0px;
            align-items: flex-end;
        }

        .char {
            display: inline-block;
            opacity: 0;
            transform: translateY(50px);
            animation: title-animation 0.8s cubic-bezier(0, 0.7, 0.3, 1) both;
        }

        .rotated-u {
            transform: rotate(30deg);
            transform-origin: 100% 100%;
        }

        .white {
            color: white;
        }

        .char:nth-child(1) { animation-delay: 0.25s; }
        .char:nth-child(2) { animation-delay: 0.3s; }
        .char:nth-child(3) { animation-delay: 0.34s; }
        .char:nth-child(4) { animation-delay: 0.37s; }
        .char:nth-child(5) { animation-delay: 0.39s; }
        .char:nth-child(6) { animation-delay: 0.88s; }
        .char:nth-child(7) { animation-delay: 0.9s; }

        @keyframes title-animation {
            0% {
                opacity: 0;
                transform: translateY(50px);
            }
            100% {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .logo {
            font-weight: bold;
            font-size: 150px;
            z-index: 2;
            position: relative;
        }
        @media screen and (max-width: 960px)  {
            .logo span{
                font-size: calc(100vw / 7);
            }
        }
        /* @media screen and (max-width: 768px)  {
            .logo span{
                font-size: calc(100vw / 7);
            }
        } */

    </style>
    <!-- hamburger menu -->
    <style>
    .hamburger {
        /* padding: 10px 0px; */
        display: inline-block;
        cursor: pointer;
        transition-property: opacity, filter;
        transition-duration: 0.15s;
        transition-timing-function: linear;
        font: inherit;
        color: inherit;
        text-transform: none;
        background-color: transparent;
        border: 0;
        margin: 0;
        overflow: visible;
        display: none;
    }
    @media screen and (max-width: 960px)  {
        .hamburger{
            display:block;
        }
    }
    .hamburger:hover {
        opacity: 0.7; 
    }
    .hamburger.is-active:hover {
        opacity: 0.7; 
    }
    .hamburger.is-active .hamburger-inner,
    .hamburger.is-active .hamburger-inner::before,
    .hamburger.is-active .hamburger-inner::after {
        background-color: #000; }
    
    .hamburger-box {
        width: 30px;
        height: 24px;
        display: inline-block;
        position: relative; 
    }
    
    .hamburger-inner {
        display: block;
        top: 50%;
        margin-top: -2px; 
    }
    .hamburger-inner, .hamburger-inner::before, .hamburger-inner::after {
        width: 30px;
        height: 2px;
        background-color: #000;
        border-radius: 10px;
        position: absolute;
        transition-property: transform;
        transition-duration: 0.15s;
        transition-timing-function: ease; 
    }
    .hamburger-inner::before, .hamburger-inner::after {
        content: "";
        display: block; 
    }
    .hamburger-inner::before {
        top: -10px;
    }

    .hamburger-inner::after {
        bottom: -10px;
        width: 30px; /* 一番下の棒の幅を短く */
        right: 0; /* 右揃え */
    }


    .hamburger--collapse .hamburger-inner {
        top: auto;
        bottom: 0;
        transition-duration: 0.13s;
        transition-delay: 0.13s;
        transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    .hamburger--collapse .hamburger-inner::after {
        top: -20px;
        transition: top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), opacity 0.1s linear;
    }
    .hamburger--collapse .hamburger-inner::before {
        transition: top 0.12s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1), transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
    
    .hamburger--collapse.is-active .hamburger-inner {
        transform: translate3d(0, -10px, 0) rotate(-45deg);
        transition-delay: 0.22s;
        transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }
    .hamburger--collapse.is-active .hamburger-inner::after {
        top: 0;
        opacity: 0;
        transition: top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333), opacity 0.1s 0.22s linear;
    }
    .hamburger--collapse.is-active .hamburger-inner::before {
        top: 0;
        width: 30px;
        transform: rotate(-90deg);
        transition: top 0.1s 0.16s cubic-bezier(0.33333, 0, 0.66667, 0.33333), transform 0.13s 0.25s cubic-bezier(0.215, 0.61, 0.355, 1);
        
    }
    
    </style>
</head>
<body>
    <header class="white">
        <div class="siteTitle"><a href="index.htm">M.H</a></div>
        <nav>
            <ul class="navList">
                
                <li><a href="#works">Works</a></li>
                <li><a href="about.htm">About</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
        <div class="hamburger hamburger--collapse">
            <div class="hamburger-box">
            <div class="hamburger-inner"></div>
            </div>
        </div>
    </header>
    <main style="height: 200vh;">
        <div style="height:100vh; background-color: #ccc; display:flex; align-items: center; justify-content: center; position: relative; overflow: hidden;">
    <div style="position: absolute; top: -5px; left: -5px; right: -5px; bottom: -5px;">
        <video id="myVideo" src="1.mp4" muted playsinline autoplay style="width: calc(100% + 10px); height: calc(100% + 10px); object-fit: cover; filter: blur(6px);"></video>
    </div>

    <div class="text-animation logo">
        <!-- <span class="char">K</span>
        <span class="char">u</span>
        <span class="char">R</span>
        <span class="char">O</span>
        <span class="char">E</span>
        <span class="char white">u</span>
        <span class="char white">1</span> -->
        <span class="char">M</span>
        <span class="char">.</span>
        <span class="char">H</span>
    </div>
</div>
    </main>

    <footer style="padding: 30px;">
        <div>© 2024 KuROEu1</div>
    </footer>

    <!-- Lenis.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/@studio-freight/lenis"></script>

    <script>
        // Lenisの初期化
        const lenis = new Lenis({
            duration: 1,
            orientation: 'vertical',
            smoothWheel: true,
        });

        function raf(time) {
            lenis.raf(time);
            requestAnimationFrame(raf);
        }

        requestAnimationFrame(raf);



    </script>
        <script>
            // すべての「hamburger」クラスを持つ要素を選択
            const hamburgers = document.querySelectorAll(".hamburger");
    
            // hamburger要素が存在する場合
            if (hamburgers.length > 0) {
            // 各hamburger要素に対して処理を行う
            hamburgers.forEach(hamburger => {
                // クリックイベントリスナーを追加
                hamburger.addEventListener("click", function() {
                // クリックされたときに「is-active」クラスを切り替え
                this.classList.toggle("is-active");
                });
            });
            }
        </script>
</body>
</html>